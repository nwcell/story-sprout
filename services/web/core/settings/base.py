"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

from django.core.exceptions import ImproperlyConfigured
from dotenv import load_dotenv

from core.logging import InterceptHandler, setup_logger

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Initialize loguru
setup_logger()

# Load environment variables from project root directory
# Load .env from project root (don't override host/CI env vars)
_env_path = BASE_DIR.parent / ".env"
if _env_path.exists():
    load_dotenv(_env_path, override=False)

# Helper function for CSV environment variables
def _csv(name: str) -> list[str]:
    v = os.getenv(name)
    return [s.strip() for s in v.split(",")] if v else []


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY:
    raise ImproperlyConfigured("SECRET_KEY env var is required")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "").lower() in {"1", "true", "yes"}

ALLOWED_HOSTS = _csv("ALLOWED_HOSTS")
CSRF_TRUSTED_ORIGINS = _csv("CSRF_TRUSTED_ORIGINS")


# Application definition

INSTALLED_APPS = [
    "daphne",  # ASGI server for WebSocket and SSE support - must be first
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "whitenoise.runserver_nostatic",  # https://whitenoise.readthedocs.io/en/latest/
    "django.contrib.staticfiles",
    "django.contrib.sites",
    # Third party apps
    "django_eventstream",  # Server-Sent Events
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "tailwind",
    "django_htmx",
    "crispy_forms",
    "crispy_tailwind",
    "ordered_model",
    "django_celery_results",
    "markdownx",
    "django_browser_reload",
    "django_cotton.apps.SimpleAppConfig",
    "template_partials.apps.SimpleAppConfig",
    # Local apps
    "apps.common",
    "apps.accounts",
    "apps.ai",
    "apps.stories",
    "apps.landing",
    "apps.dashboard",
    "apps.subscriptions",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

if DEBUG:
    # Add django_browser_reload middleware only in DEBUG mode
    MIDDLEWARE += [
        "django_browser_reload.middleware.BrowserReloadMiddleware",
    ]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates", BASE_DIR / "apps/ai/prompt_templates"],
        "APP_DIRS": False,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            "loaders": [
                (
                    "template_partials.loader.Loader",
                    [
                        (
                            "django.template.loaders.cached.Loader",
                            [
                                "django_cotton.cotton_loader.Loader",
                                "django.template.loaders.filesystem.Loader",
                                "django.template.loaders.app_directories.Loader",
                            ],
                        )
                    ],
                )
            ],
            "builtins": [
                "django_cotton.templatetags.cotton",
                "template_partials.templatetags.partials",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"
ASGI_APPLICATION = "core.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration with PostgreSQL support via environment variables
if os.getenv("DB_NAME"):
    # Use PostgreSQL if database environment variables are provided
    DATABASES = {
        "default": {
            "ENGINE": os.getenv("DB_ENGINE", "django.db.backends.postgresql"),
            "NAME": os.getenv("DB_NAME"),
            "USER": os.getenv("DB_USER"),
            "PASSWORD": os.getenv("DB_PASSWORD"),
            "HOST": os.getenv("DB_HOST", "localhost"),
            "PORT": os.getenv("DB_PORT", "5432"),
        }
    }
else:
    # Fallback to SQLite for development
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [BASE_DIR / "static"]

# Media files (User uploaded content)
MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Tailwind configuration
TAILWIND_APP_NAME = "theme"

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

# Django Allauth configuration
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

SITE_ID = int(os.getenv("SITE_ID", "1"))
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_EMAIL_VERIFICATION = os.getenv("ACCOUNT_EMAIL_VERIFICATION") or "mandatory"
ACCOUNT_UNIQUE_EMAIL = True

# Email configuration (env-driven; rely on Django defaults if unset)
EMAIL_BACKEND = os.getenv("EMAIL_BACKEND")  # None -> Django default
EMAIL_HOST = os.getenv("EMAIL_HOST")
EMAIL_PORT = int(os.getenv("EMAIL_PORT")) if os.getenv("EMAIL_PORT") else None
EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "").lower() in {"1", "true", "yes"}
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")

# Login/Logout URLs
LOGIN_REDIRECT_URL = "/dashboard"
LOGOUT_REDIRECT_URL = "/"
LOGIN_URL = "account_login"

# Stripe settings (env-only; no defaults)
STRIPE_PUBLIC_KEY = os.getenv("STRIPE_PUBLIC_KEY")
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY")
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET")
STRIPE_PRICE_ID = os.getenv("STRIPE_PRICE_ID")

# AI settings (env-only; no defaults)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Celery settings (env-only; remove conflicting defaults)
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND")
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# EventStream configuration for Server-Sent Events
EVENTSTREAM_STORAGE_CLASS = "django_eventstream.storage.DjangoModelStorage"
EVENTSTREAM_CHANNELMANAGER_CLASS = "apps.common.sse.ChannelManager"

# EventStream Redis configuration (only if provided)
_event_redis_url = os.getenv("EVENTSTREAM_REDIS_URL") or os.getenv("REDIS_URL")
if _event_redis_url:
    EVENTSTREAM_REDIS = {"url": _event_redis_url}
else:
    _host = os.getenv("REDIS_HOST")
    if _host:
        EVENTSTREAM_REDIS = {
            "host": _host,
            "port": int(os.getenv("REDIS_PORT", 6379)),
            "db": int(os.getenv("REDIS_DB", 0)),
        }
    # else: don't define EVENTSTREAM_REDIS in base


LOGGING = {
    "version": 1,
    # IMPORTANT: drop Django's built-in handlers so you don't get duplicates
    "disable_existing_loggers": True,
    "handlers": {
        "loguru": {"()": InterceptHandler},  # your InterceptHandler
    },
    # Single sink: everything bubbles to root -> InterceptHandler -> Loguru
    "root": {"handlers": ["loguru"], "level": "INFO"},
    "loggers": {
        # Let these bubble up to root; DO NOT attach their own handlers
        "django": {"level": "INFO", "propagate": True},
        "django.server": {"level": "WARNING", "propagate": True},  # or INFO if you want access logs
        "django.request": {"level": "INFO", "propagate": True},
        "daphne": {"level": "INFO", "propagate": True},
        "daphne.server": {"level": "INFO", "propagate": True},
        "daphne.http_protocol": {"level": "INFO", "propagate": True},
        # If you see asyncio duplicates/noise:
        "asyncio": {"level": "WARNING", "propagate": True},
    },
}
